#!/bin/bash
#
# BEGIN_COPYRIGHT
#
# This file is part of SciDB.
# Copyright (C) 2008-2014 SciDB, Inc.
#
# SciDB is free software: you can redistribute it and/or modify
# it under the terms of the AFFERO GNU General Public License as published by
# the Free Software Foundation.
#
# SciDB is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
# INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
# NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
# the AFFERO GNU General Public License for the complete license terms.
#
# You should have received a copy of the AFFERO GNU General Public License
# along with SciDB.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
#
# END_COPYRIGHT
#
set -u
################################################################
# Processed values:
MYDIR=`dirname ${0}`
################################################################
#
# This script will check ssh connectivity
# to the hosts listed in the host file
# from the present host ssh'ing as user
#
user="${1}"
host_file="${2}"
key_file="${3}"
if [ ! -f "${host_file}" ]; then
    echo
    echo "Host file '${host_file}' not found."
    exit 1
fi
################################################################
# CHECK SSH TO HOSTS
#
echo "................................................................."
echo "Checking ssh connectivity to all hosts from $HOSTNAME as '$user'."
echo "................................................................."
echo
echo "As user '${user}' password-less ssh should allow access to all the hosts in your configuration file."
echo -n "Shall I check now? [y|n] "
read -e yes_no
if [[ ${yes_no} =~ ^[yY] ]]; then
    echo
else
    echo
    echo "Try again when you have established ssh connectivity as '${user}' to all hosts."
    exit 1
fi
problemHost=""
while read host
do
    echo "Checking ${user}@${host}..."
    ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes ${user}@${host} hostname
    if [ $? -ne 0 ]; then
	problemHost="${host}"
	break
    fi
done < ${host_file}
if [ -n "${problemHost}" ]; then
    host=${problemHost}
    # Check that ssh port can connect
    checkPortStatus=`${MYDIR}/check_port ${host} 22 2>&1`
    set -- $checkPortStatus
    if [ ${2} != "OK" ]; then
	echo
	echo "There is a problem with ssh'ng to '${host}'."
	echo "The ssh port (22) does not appear to be available on '${host}'."
	echo
	echo "Possibilities include:"
	echo "  sshd is not running on '${host}'."
	echo "  ssh is not properly configured on '${host}'."
	echo "  There is a firewall blocking the ssh port."
	echo "    The firewall could be on '${host}'. For instance are iptables running?"
	echo "    The firewall could be on a router between here and '${host}'."
	echo
	echo ">>> Please fix and rerun this script."
	exit 1
    fi
    # Try ssh-copy-id
    echo
    echo "Problem with ssh ${user}@${host} from $HOSTNAME."
    echo
    echo "It is possible your ssh public key is not in '${host}'s authorized_keys file."
    echo "This can be fixed by running ssh-copy-id to ${user}@${host}."
    echo
    echo "I can run ssh-copy-id for you but you will need to know '${user}'s password on '${host}'."
    echo "Optionally I can run ssh-copy-id to all the hosts in your configuration file."
    echo
    echo -n "OPTIONAL Shall I run ssh-copy-id to all hosts ? [y|n] "
    read -e yes_no
    if [[ ${yes_no} =~ ^[yY] ]]; then
	echo
	export SSHPASS=""
	echo -n "Please enter the password for '${user}' on all the hosts (I am assuming they are all the same): "
	read -s -e SSHPASS
	while read host
	do
	    ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes ${user}@${host} hostname
	    if [ $? -ne 0 ]; then
		echo
		echo "ssh-copy-id -i ~/.ssh/${key_file} ${user}@${host}"
		sshpass -e ssh-copy-id -i ~/.ssh/${key_file} ${user}@${host}
	    fi
	    echo
	    echo "Checking ${user}@${host}..."
	    ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes ${user}@${host} hostname
	    if [ $? -ne 0 ]; then
		echo
		echo "That did not fix it."
		echo
		# Check that ssh port can connect
		checkPortStatus=`${MYDIR}/check_port ${host} 22 2>&1`
		set -- $checkPortStatus
		if [ ${2} != "OK" ]; then
		    echo
		    echo "The ssh port (22) does not appear to be available on '${host}'."
		    echo
		    echo "Possibilities include:"
		    echo "  sshd is not running on '${host}'."
		    echo "  ssh is not properly configured on '${host}'."
		    echo "  There is a firewall blocking the ssh port."
		    echo "    The firewall could be on '${host}'. For instance are iptables running?"
		    echo "    The firewall could be on a router between here and '${host}'."
		    echo
		    echo ">>> Please fix and rerun this script."
		    exit 1
		fi
		echo "I suggest you log onto '${host}' and fix ssh there."
		echo
		echo "Suggestions:"
		echo " Is SELinux enabled and is ssh configured properly?"
		echo "   You could try 'setenforce 0' to see if that fixes it."
		echo
		echo "Try again when you have fixed the problem."
		exit 1
	    fi
	done < ${host_file}
	echo
	echo "That fixed it."
	echo
	echo ">>> Please rerun this script so we may continue."
	exit 1
    fi
    echo -n "Shall I run ssh-copy-id to host '${host}' ? [y|n] "
    read -e yes_no
    if [[ ${yes_no} =~ ^[yY] ]]; then
	echo
	echo "ssh-copy-id -i ~/.ssh/${key_file} ${user}@${host}"
	ssh-copy-id -i ~/.ssh/${key_file} ${user}@${host}
	echo
	ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes ${user}@${host} hostname
	if [ $? -ne 0 ]; then
	    echo
	    echo "That did not fix it."
	    echo
	    echo "I suggest you log onto '${host}' and fix ssh there."
	    echo
	    echo "Suggestions:"
	    echo " Is SELinux enabled and is ssh configured properly?"
	    echo "   You could try 'setenforce 0' to see if that fixes it."
	    echo
	    echo "Try again when you have fixed the problem."
	    exit 1
	else
	    echo
	    echo "That fixed it."
	    echo
	    echo ">>> Please rerun this script so we may continue."
	    exit 1
	fi
    else
	echo
	echo "Try again when you have fixed the problem."
	exit 1
    fi
fi
echo "......................................................................"
echo "OK: ssh connectivity to all hosts from $HOSTNAME as '$user' confirmed."
echo "......................................................................"
exit 0
