#!/bin/bash
#
# BEGIN_COPYRIGHT
#
# This file is part of SciDB.
# Copyright (C) 2008-2014 SciDB, Inc.
#
# SciDB is free software: you can redistribute it and/or modify
# it under the terms of the AFFERO GNU General Public License as published by
# the Free Software Foundation.
#
# SciDB is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
# INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
# NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
# the AFFERO GNU General Public License for the complete license terms.
#
# You should have received a copy of the AFFERO GNU General Public License
# along with SciDB.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
#
# END_COPYRIGHT
#
set -u
################################################################
#
# This file is sourced.
#
################################################################
# CHECK SSH TO HOSTS
#
echo
echo "Confirming ssh connectivity to all hosts from $HOSTNAME as '$USER'."
portProblems=""
sshProblems=""
while read -u3 host
do
    echo "  Confirming ssh ${host} hostname"
    ssh -i ~/.ssh/${key_file} -n -o StrictHostKeyChecking=no -o BatchMode=yes ${host} hostname > /dev/null
    if [ $? -ne 0 ]; then
	# Check that ssh port can connect
	checkPortStatus=`${MYDIR}/check_port ${host} ${ssh_port} 2>&1`
	set -- $checkPortStatus
	if [ ${2} != "OK" ]; then
	    if [ -z "$portProblems" ]; then
		portProblems="${host}"
	    else
		portProblems="${portProblems} ${host}"
	    fi
	else
	    # The port is OK
	    if type sshpass >/dev/null 2>&1; then
		# Try ssh-copy-id
		if [ -z "$SSHPASS" ]; then
		    echo
		    echo "I need the '$USER' password for all the hosts in your cluster."
		    echo "I am assuming the password is the same for all hosts."
		    echo
		    echo "The password you give me will exist in this running image only and NOT saved anywhere."
		    echo "I need it to ssh-copy-id $USER's ssh key to all nodes."
		    echo
		    CONFIRM="no"
		    while [ "$SSHPASS" != "$CONFIRM" ]
		    do
			read -s -e -p "Please enter the password for '$USER': " SSHPASS
			echo
			read -s -e -p "Please reenter password for verification: " CONFIRM
			if [ "$SSHPASS" != "$CONFIRM" ]; then
			    echo
			    echo "Your entries did not match. Try again."
			    echo
			fi
		    done
		    echo
		    unset CONFIRM
		fi
		echo "ssh-copy-id -i ~/.ssh/${key_file}.pub ${host}"
		sshpass -e ssh-copy-id -i ~/.ssh/${key_file}.pub ${host}
		echo
		ssh -i ~/.ssh/${key_file} -n -o StrictHostKeyChecking=no -o BatchMode=yes ${host} hostname > /dev/null
		if [ $? -ne 0 ]; then
		    if [ -z "$sshProblems" ]; then
			sshProblems="${host}"
		    else
			sshProblems="${sshProblems} ${host}"
		    fi
		fi
	    else
		# Do without sshpass
		echo "ssh-copy-id -i ~/.ssh/${key_file}.pub ${host}"
		ssh-copy-id -i ~/.ssh/${key_file}.pub ${host}
		echo
		ssh -i ~/.ssh/${key_file} -n -o StrictHostKeyChecking=no -o BatchMode=yes ${host} hostname > /dev/null
		if [ $? -ne 0 ]; then
		    if [ -z "$sshProblems" ]; then
			sshProblems="${host}"
		    else
			sshProblems="${sshProblems} ${host}"
		    fi
		fi
	    fi
	fi
    fi
    echo "  ...confirmed."
done 3< ${host_file}
#
if [ -n "${portProblems}" ]; then
    echo ">>> "
    echo ">>> The ssh port ${ssh_port} does not appear to be available on the following hosts:"
    echo ">>> "
    echo ">>> ${portProblems}"
    echo ">>> "
    echo ">>> I found no problems with ssh on this host."
    echo ">>> The problem exists on the receiving host."
    echo ">>> "
    echo ">>> Possibilities include:"
    echo ">>>   sshd is not running on those hosts."
    echo ">>>   ssh is not properly configured on those hosts."
    echo ">>>   There is a firewall blocking the ssh port."
    echo ">>>     The firewall could be on those hosts."
    echo ">>>     The firewall could be on a router between here and those hosts."
    echo ">>> "
    echo ">>> Since I can not get to those hosts..."
    echo ">>> Please fix and try again."
    exit 1
fi
if [ -n "${sshProblems}" ]; then
    echo ">>> "
    echo ">>> There was a problem ssh'ing from this host to the following hosts:"
    echo ">>> "
    echo ">>> ${sshProblems}"
    echo ">>> "
    echo ">>> I found no problems with ssh on this host."
    echo ">>> I found the ssh port ${ssh_port} is available on those hosts."
    echo ">>> I did a 'ssh-copy-id' to those hosts."
    echo ">>> "
    echo ">>> I suggest you log onto those hosts and fix ssh there."
    echo ">>> "
    echo ">>> If SELinux is enabled and if ssh is configured properly..."
    echo ">>>    You could try 'setenforce 0' to see if that fixes it."
    echo ">>> "
    echo ">>> Since I can not get to those hosts..."
    echo ">>> Please fix and try again."
    exit 1
fi
echo "...confirmed."
