#!/bin/bash
#
# BEGIN_COPYRIGHT
#
# This file is part of SciDB.
# Copyright (C) 2008-2014 SciDB, Inc.
#
# SciDB is free software: you can redistribute it and/or modify
# it under the terms of the AFFERO GNU General Public License as published by
# the Free Software Foundation.
#
# SciDB is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
# INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
# NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
# the AFFERO GNU General Public License for the complete license terms.
#
# You should have received a copy of the AFFERO GNU General Public License
# along with SciDB.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
#
# END_COPYRIGHT
#
set -u
################################################################
# Processed values:
MYDIR=`dirname ${0}`
OStype=`awk 'NR == 1 {print $1}' /etc/issue`
# OStype = Ubuntu CentOS Red
################################################################
# Argument processing
host_file="${1}"
if [ ! -f "${host_file}" ]; then
    echo
    echo "Host file '${host_file}' not found."
    exit 1
fi
################################################################################
#
# This script will check ssh functionality on the localhost as the present user
#
################################################################################
echo "................................................................................"
echo "Checking ssh functionality on localhost ($HOSTNAME) as '$USER'."
echo "................................................................................"
# CHECK SSH PORT ON LOCALHOST
checkPortStatus=`${MYDIR}/check_port localhost 22 2>&1`
set -- $checkPortStatus
if [ ${2} != "OK" -a ${2} != "CONNECT" ]; then
    echo
    echo "SOMETHING IS TERRIBLY WRONG."
    echo "Checking port 22 on this machine and received error ${2}."
    echo
    echo "I have no idea what went wrong."
    echo ">>> Please fix and rerun this script."
    exit 1
fi
if [ ${2} != "OK" ]; then
    echo
    echo "There is a problem with ssh on this machine."
    echo "The ssh port (22) does not appear to be available."
    echo
    echo "Possibilities include:"
    service sshd status > /dev/null 2>&1
    if [ $? -ne 0 ]; then
	echo "  sshd is not running on this machine."
    fi
    echo "  ssh is not properly configured on this machine."
    echo "  There is a firewall on this machine blocking the ssh port."
    if [ "${OStype}" = "CentOS" -o "${OStype}" = "Red" ]; then
	service iptables status > /dev/null 2>&1
	if [ $? -eq 0 ]; then
	    echo "    IPtables are active. Check that port 22 is allowed."
	fi
    fi
    echo ">>> Please fix and rerun this script."
    exit 1
fi
################################################################
# CHECK SSH
#
# Look for the .ssh directory
if [ ! -d ~/.ssh ]; then
    echo
    echo "You do not have a ssh key pair."
    echo
    echo "Installation requires a password-less ssh key"
    echo "to avoid having to enter a password for each use of the key."
    echo
    echo -n "Shall I generate a password-less ssh key pair for you? [y|n] "
    read -e yes_no
    if [[ ${yes_no} =~ ^[yY] ]]; then
	echo
	ssh-keygen -N "" -t rsa -f ~/.ssh/id_rsa
    else
	echo
	echo ">>> Rerun this script when you have prepared a password-less ssh key pair."
	exit 1
    fi
fi
# Set permission of .ssh directory just in case
chmod 700 ~/.ssh
#
# Check that a pair exists
kp=""
for p in id_rsa id_dsa id_ecdsa
do
    if [ -f ~/.ssh/${p} -a -f ~/.ssh/${p}.pub ]; then
	if [ -z "${kp}" ]; then
	    kp="${p}"
	else
	    kp="${kp} ${p}"
	fi
    fi
done
if [ -z "${kp}" ]; then
    echo
    echo "You do not have any valid ssh key pairs."
    echo
    echo "Installation requires a password-less ssh key"
    echo "to avoid having to enter a password for each use of the key."
    echo
    echo -n "Shall I generate a password-less ssh key pair for you? [y|n] "
    read -e yes_no
    if [[ ${yes_no} =~ ^[yY] ]]; then
	echo
	rm -f ~/.ssh/id_rsa ~/.ssh/id_rsa.pub
	ssh-keygen -N "" -t rsa -f ~/.ssh/id_rsa
	kp="id_rsa"
    else
	echo
	echo ">>> Rerun this script when you have prepared a password-less ssh key pair."
	exit 1
    fi
fi
# Ask which key to use if there are more than one
key_pair=""
COUNT=(${kp})
if [ ${#COUNT[@]} -ne 1 ]; then
    echo
    echo "You have multiple ssh key pairs (${kp})."
    echo -n "Which one should I use? "
    read -e key_pair
    if [ ! -f ~/.ssh/${key_pair} ]; then
	echo
	echo "That was not one of the options."
	echo ">>> Rerun this script with a valid key pair specified."
	exit 1
    else
	kp=${key_pair}
    fi
fi
# Check that it is password-less
grep ENCRYPTED ~/.ssh/${kp} > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo
    echo "Your ssh key pair has a password."
    echo
    echo "Installation requires a password-less ssh key"
    echo "to avoid having to enter a password for each use of the key."
    echo
    echo -n "Shall I replace your key pair with a password-less ssh key pair for you? [y|n] "
    read -e yes_no
    if [[ ${yes_no} =~ ^[yY] ]]; then
	echo
	rm -f ~/.ssh/${kp}
	type=${kp#id_}
	ssh-keygen -N "" -t ${type} -f ~/.ssh/${kp}
    else
	echo
	echo ">>> Rerun this script when you have prepared a password-less ssh key pair."
	exit 1
    fi
fi
# IF MULTIPLE KEYS, HARDCODE WHICH ONE TO USE
if [ -n "${key_pair}" ]; then
    echo
    echo "I am writing to your ssh config file (~/.ssh/config),"
    echo "setting which key to use for each host you specified in the configuration file."
    echo
    if [ -f ~/.ssh/config ]; then
	sed -i '/# SciDB Installation/,$d' ~/.ssh/config
    fi
    echo "# SciDB Installation" >> ~/.ssh/config
    while read h
    do
	echo "Host ${h}" >> ~/.ssh/config
	echo "  IdentityFile ~/.ssh/${key_pair}" >> ~/.ssh/config
    done < ${host_file}

fi
# Set permissions on files used in ~/.ssh
if [ -f ~/.ssh/config ]; then chmod 600 ~/.ssh/config; fi
chmod 600 ~/.ssh/${kp}
chmod 644 ~/.ssh/${kp}.pub
################################################################
# TEST SSH TO LOCALHOST
#
# Make a temporary entry in the authorized_keys file
if [ -f ~/.ssh/authorized_keys ]; then
    existsAuthorized_Keys=1
    cp -p ~/.ssh/authorized_keys ~/.ssh/authorized_keys.bak
else
    existsAuthorized_Keys=0
fi
cat ~/.ssh/${kp}.pub >> ~/.ssh/authorized_keys
chmod go-w ~/.ssh/authorized_keys
#
ssh -i ~/.ssh/${kp} -n -o StrictHostKeyChecking=no -o BatchMode=yes localhost hostname
sshStatus=$?
# Restore authorized_keys file
if [ ${existsAuthorized_Keys} -eq 0 ]; then
    rm ~/.ssh/authorized_keys
else
    cp -p ~/.ssh/authorized_keys.bak ~/.ssh/authorized_keys
    rm ~/.ssh/authorized_keys.bak
fi
#
if [ ${sshStatus} -ne 0 ]; then
    echo
    echo "Problem with ssh to localhost from localhost ($HOSTNAME)."
    echo
    echo "The ssh port is OK."
    echo "The keys are OK."
    if [ -n "${SELINUX}" ]; then
	if [ "${SELINUX}" = "Enforcing" ]; then
	    echo
	    echo "You have SELinux enabled."
	    echo "There may be configuration issues with ssh or your .ssh directory."
	    echo
	    echo "I suggest AS ROOT you run 'setenforce 0' and try this script again."
	    echo "If that works then you have a SELinux configuration issue with ssh."
	    echo "In which case you may want to set SELinux to permissive permanently"
	    echo "by modifying /etc/selinux/config."
	    echo
	    echo "Or you may want to fix the problem :-)"
	    exit 1
	fi
    fi
    echo "Try again when you have fixed the problem."
    exit 1
fi
# Save out kp
echo ${kp} > ~/.ssh/kp
echo "................................................................................"
echo "OK: ssh functionality on localhost ($HOSTNAME) as '$USER' confirmed."
echo "................................................................................"
exit 0
