#!/bin/bash
#
# BEGIN_COPYRIGHT
#
# This file is part of SciDB.
# Copyright (C) 2008-2014 SciDB, Inc.
#
# SciDB is free software: you can redistribute it and/or modify
# it under the terms of the AFFERO GNU General Public License as published by
# the Free Software Foundation.
#
# SciDB is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
# INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
# NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
# the AFFERO GNU General Public License for the complete license terms.
#
# You should have received a copy of the AFFERO GNU General Public License
# along with SciDB.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
#
# END_COPYRIGHT
#
set -u
################################################################
#
# This file is sourced.
#
################################################################
echo
echo "Confirming ssh functionality on localhost ($HOSTNAME) as '$USER'..."
#
# If the user specified a ssh-port to use in the SciDB configuration file then use that.
#
# CHECK SSH PORT ON LOCALHOST
checkPortStatus=`${MYDIR}/check_port localhost ${ssh_port} 2>&1`
set -- $checkPortStatus
if [ ${2} != "OK" ]; then
    echo ">>> "
    echo ">>> There is a problem with ssh on this machine."
    echo ">>> The ssh port ${ssh_port} does not appear to be available."
    echo ">>> "
    echo ">>> The 'ssh' daemon is running."
    echo ">>> The firewall is off."
    echo ">>> When trying to connect to the port I get:"
    echo ">>>   $checkPortStatus"
    echo ">>> "
    echo ">>> Please fix and try again."
    exit 1
fi
echo "...confirmed."
################################################################
# SETUP SSH KEY
. ${MYDIR}/setup_ssh_key
################################################################
# TEST SSH TO LOCALHOST
#
function print_ssh_problem ()
{
    echo ">>> "
    echo ">>> There was a problem ssh'ing from this host ($HOSTNAME) to this host (localhost) as $USER"
    echo ">>> "
    echo ">>> The ssh port ${ssh_port} is available."
    echo ">>> The 'ssh' daemon is running."
    echo ">>> "
}
#
# Try ssh'ing
#
echo
echo "Confirming 'ssh localhost hostname' works..."
ssh -i ~/.ssh/${key_file} -n -o StrictHostKeyChecking=no -o BatchMode=yes -o LogLevel=QUIET localhost hostname > /dev/null
if [ $? -ne 0 ]; then
    echo ">>> "
    echo ">>> ssh to localhost did not work."
    if [ "${SELINUX}" = "Enforcing" ]; then
	echo ">>> "
	echo ">>> SELinux is enforcing."
	if [ `id -u` -ne 0 ]; then
	    echo ">>> Not being root I can not try turning off SELinux."
	    echo ">>> This may or may not be the problem."
	    echo ">>> "
	    echo ">>> Please fix and try again."
	    exit 1
	else
	#  Try turning off SELinux
	    setenforce 0
	    echo ">>> Turning off SELinux and trying again."
	    ssh -i ~/.ssh/${key_file} -n -o StrictHostKeyChecking=no -o BatchMode=yes -o LogLevel=QUIET localhost hostname
	    if [ $? -ne 0 ]; then
		setenforce 1
		print_ssh_problem
		echo ">>> I have no idea what the problem is."
		echo ">>> "
		echo ">>> Please fix and try again."
		exit 1
	    else
		print_ssh_problem
		echo ">>> "
		echo ">>> Setting SELinux to permissive mode fixed the problem."
		echo ">>> "
		echo ">>> I have left SELinux in permissive mode (setenforce 0)."
		echo ">>> Please consider turning SELinux off at boot by modifying /etc/selinux/config."
		echo ">>> "
		sleep 5
	    fi
	fi
    fi
    print_ssh_problem
    echo ">>> I have no idea what the problem is."
    echo ">>> "
    echo ">>> Please fix and try again."
    exit 1
fi
echo "...confirmed"
