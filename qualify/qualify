#!/bin/bash
#
# BEGIN_COPYRIGHT
#
# This file is part of SciDB.
# Copyright (C) 2008-2014 SciDB, Inc.
#
# SciDB is free software: you can redistribute it and/or modify
# it under the terms of the AFFERO GNU General Public License as published by
# the Free Software Foundation.
#
# SciDB is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
# INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
# NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
# the AFFERO GNU General Public License for the complete license terms.
#
# You should have received a copy of the AFFERO GNU General Public License
# along with SciDB.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
#
# END_COPYRIGHT
#
set -u
################################################################
# This script will qualify your installation.
# If you let it do what it has to do it will prepare your cluster for installation.
#
# It is based off of your configuration file.
#
################################################################
# Global values:
#
################################################################
# Processed values:
#
# MYDIR
MYDIR=`dirname ${0}`
pushd ${MYDIR} > /dev/null
MYDIR=`pwd`
popd > /dev/null
# OStype
if [ -f /etc/centos-release ]; then
    OStype="CentOS"
elif [ -f /etc/redhat-release ]; then
    grep "Red Hat" /etc/redhat-release > /dev/null 2>&1
    if [ $? -eq 0 ]; then
	OStype="RedHat"
    else
	OStype="Unknown"
    fi
elif [ -f /etc/os-release ]; then
    grep "Ubuntu" /etc/os-release > /dev/null 2>&1
    if [ $? -eq 0 ]; then
	OStype="Ubuntu"
    else
	OStype="Unknown"
    fi
fi
case "${OStype}" in
    Ubuntu)
	;;
    CentOS)
	;;
    RedHat)
	;;
    *)
	echo
	echo ">>> We do not support this operating system."
	exit 1
esac
# SELINUX
if type getenforce >/dev/null 2>&1; then
    SELINUX="`getenforce`"
else
    SELINUX=""
fi
################################################################
# Temporary files and directories
#   Note that any temp file or directory will be removed on exit
trap on_exit EXIT
function on_exit()
{
    rm -rf ${WORKING_DIR}
}
WORKING_DIR=`mktemp -d "/tmp/${USER}_INSTALL_XXXX"`
################################################################
# ARGUMENT PROCESSING
function usage {
    cat <<EOF

Usage:
$0 -h|--help
$0 [-u <username>] <config_file>
  <username>    - non-root user that will run SciDB
                - defaults to user "scidb"
  <config_file> - The SciDB configuration file SciDB will be running with
EOF
}
if [ $# -lt 1 ]; then
    echo
    echo ">>> Not enough arguments"
    usage
    exit 1
fi
CMDLINE="$0 $*"
################################################################
# yes is a hidden arguments
# --yes means just do whatever it takes don't ask
#
yes=0
username="scidb"
case "${1}" in
    -h|--help)
	usage
	exit 0
	;;
    -y|--yes)
	yes=1
	shift
	;;
    -u|--user)
	shift
	if [ $# -lt 1 ]; then
	    echo
	    echo ">>> --user <username>"
	    echo ">>> username not given."
	    exit 1
	fi
	username="${1}"
	shift
	;;
    -*)
	echo
	echo ">>> Unknown switch: '${1}'"
	usage
	exit 1
	;;
esac
config_file="`readlink -m ${1}`"
if [ ! -f "${config_file}" ]; then
    echo
    echo ">>> No configuration file at location '${config_file}'."
    exit 1
fi
echo
echo "Qualifying cluster defined in configuration file"
echo "  '${config_file}'"
echo "with SciDB to be run by user"
echo "  '${username}'..."
echo
################################################################
# Read in the config.ini file
#   The variable config_file should be set.
echo "Reading configuration file..."
. ${MYDIR}/read_config_file
echo "...done"
################################################################
# MUST BE RUN ON THE COORDINATOR
MYIP=`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'`
echo
echo "Confirming that we are running on coordinator '${coordinator}'..."
if [ "${coordinator}" != "localhost" -a "$HOSTNAME" != "${coordinator}" -a "$MYIP" != "${coordinator}" ]; then
    echo ">>> "
    echo ">>> This script must be run on the coordinator '${coordinator}'."
    echo ">>> Please login to the coordinator and try again."
    echo ">>> "
    echo ">>> Running as ${USER} the command: '${CMDLINE}'."
    exit 1
fi
echo "...confirmed."
#################################################################
# CHECK THAT PRESENT MACHINE HAS SSH
#
# ssh
echo
echo "Confirming '${coordinator}' has 'ssh'..."
if ! type ssh >/dev/null 2>&1; then
    echo ">>> "
    echo ">>> Can not find command 'ssh'."
    echo ">>> You need ssh and sshd to be installed on this machine."
    echo ">>> Try again once it is installed."
    exit 1
fi
echo "...confirmed."
# sshd
echo
echo "Confirming '${coordinator}' has 'sshd'..."
if ! type sshd >/dev/null 2>&1; then
    echo ">>> "
    echo ">>> Can not find daemon 'sshd'."
    echo ">>> You need sshd to be installed on this machine."
    echo ">>> Try again once it is installed."
    exit 1
fi
echo "...confirmed."
# sshd running ?
echo
echo "Confirming that 'sshd' is running on '${coordinator}'..."
ps -ef | grep /usr/sbin/sshd | grep -v grep > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo
    echo ">>> SSH daemon is not running."
    if [ `id -u` -ne 0 ]; then
	echo ">>> It needs to be started on this machine."
	echo ">>> Try again once it is started."
	exit 1
    else
	echo ">>> Starting sshd..."
	case "${OStype}" in
	    Ubuntu)
		service ssh status > /dev/null 2>&1
		if [ $? -ne 0 ]; then
		    service ssh start
		    service ssh status > /dev/null 2>&1
		    if [ $? -ne 0 ]; then
			echo ">>> ...FAILED TO START SSHD."
			echo ">>> Try again once it is started."
			exit 1
		    fi
		fi
		;;
	    CentOS|RedHat)
		service sshd status > /dev/null 2>&1
		if [ $? -ne 0 ]; then
		    service sshd start
		    service sshd status > /dev/null 2>&1
		    if [ $? -ne 0 ]; then
			echo ">>> ...FAILED TO START SSHD."
			echo ">>> Try again once it is started."
			exit 1
		    fi
		fi
		;;
	esac
    fi
fi
echo "...confirmed."
# sshpass
echo
echo "Confirming '${coordinator}' has 'sshpass'..."
if ! type sshpass >/dev/null 2>&1; then
    echo ">>> "
    echo ">>> The program 'sshpass' is not installed on this machine."
    echo ">>> 'sshpass' is a noninteractive ssh password provider."
    echo ">>> This allows for you to provide a password once,"
    echo ">>> for multiple calls of ssh-copy-id used to add ssh keys to the other hosts."
    echo ">>> The password you provide will exist in this running image only and NOT saved anywhere."
    echo ">>> "
    if [ `id -u` -ne 0 ]; then
	echo ">>> Not being root you can not install it yourself."
	echo ">>> "
	echo ">>> You can exit this script, have sshpass installed, and re-run this script."
	echo ">>> Or we can continue and you will be asked multiple times to provide a password for ssh-copy-id to each host."
	echo ">>> "
	read -e -p ">>> Would you like to exit this script to install sshpass? [y|n] " yes_no
	if [[ ${yes_no} =~ ^[yY] ]]; then
	    exit 0
	else
	    echo "...sshpass not installed."
	fi
    else
	echo ">>> Installing 'sshpass'..."
	case "${OStype}" in
	    Ubuntu)
		apt-get install -y sshpass
		;;
	    CentOS|RedHat)
		rpm -U http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
		yum install -y sshpass
		;;
	esac
	echo ">>> ...'sshpass' installed."
	echo "...confirmed."
    fi
else
    echo "...confirmed."
fi
export SSHPASS=""
################################################################
# CHECK SSH ON LOCAL HOST
. ${MYDIR}/check_ssh_localhost
################################################################
# CHECK SSH TO HOSTS AS ROOT
. ${MYDIR}/check_ssh_2hosts
################################################################
# DISABLE FIREWALLS
#
# Copy disable_firewall script to each host and run it.
#
if [ `id -u` -eq 0 ]; then
    echo "................................................................"
    echo "Disabling firewalls on all hosts."
    echo "................................................................"
    while read -u3 host
    do
	ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes -o LogLevel=QUIET root@$host "rm -f /tmp/disable_firewall"
	scp -q ${MYDIR}/disable_firewall root@$host:/tmp
	ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes -o LogLevel=QUIET root@$host "/tmp/disable_firewall"
    done 3< ${host_file}
fi
################################################################
# CHECK FOR ANY PORT BLOCKAGE
#
# Use SciDB port 1239 as a test
echo
echo "Confirming port connections via SciDB port 1239 between all nodes..."
rm -f ${WORKING_DIR}/CheckPorts.log
# Copy checkPorts script to each host and run it.
while read -u3 host
do
    TEMPDIR=`ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes -o LogLevel=QUIET $host 'mktemp -d "/tmp/${USER}_qualify_XXXX"'`
    scp -q ${MYDIR}/checkPorts ${MYDIR}/check_port ${host_file} $host:${TEMPDIR}
    ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes -o LogLevel=QUIET $host "${TEMPDIR}/checkPorts ${TEMPDIR}/host_file" >> ${WORKING_DIR}/CheckPorts.log 2>&1
    ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes -o LogLevel=QUIET $host "rm -rf ${TEMPDIR}"
done 3< ${host_file}
#
# Process the CheckPorts.log file
#
awk '$2 == "GETADDRINFO" || $2 == "SOCKET" || $2 == "CONNECT" || $2 == "OK" {print}' ${WORKING_DIR}/CheckPorts.log > ${WORKING_DIR}/CheckPorts.tmp
cat ${WORKING_DIR}/CheckPorts.tmp > ${WORKING_DIR}/CheckPorts.log
sed -i -e '/OK/d' -e '/Connection refused/d' ${WORKING_DIR}/CheckPorts.log
sed -i -e '/known hosts/d' ${WORKING_DIR}/CheckPorts.log
cp ${WORKING_DIR}/CheckPorts.log .
#
# Was there a problem?
#
CheckPortsWC=`wc -l ${WORKING_DIR}/CheckPorts.log|awk '{print $1}'`
if [ $CheckPortsWC -ne 0 ]; then
    cp ${WORKING_DIR}/CheckPorts.log .
    echo ">>> "
    echo ">>> There are problems with port connectivity between hosts"
    echo ">>> that I do not know how to fix."
    echo ">>> "
    echo ">>> There is a log of all port problems in ${MYDIR}/CheckPorts.log."
    echo ">>> "
    echo ">>> 'No route to host' messages probably indicates a firewall."
    echo ">>>   We recommend turning off all firewalls on all hosts."
    echo ">>> "
    echo ">>> 'GETADDRINFO' messages indicate a problem getting the IP of the given host."
    echo ">>> "
    echo ">>> Please fix and try again."
    exit 1
fi
echo "...confirmed."
################################################################
# CHECK THAT USER EXISTS ON ALL HOSTS
# and with the same home directory
# and that their .bashrc is writable
USER_HOME=$(eval echo ~${username})
while read -u3 host
do
    ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes -o LogLevel=QUIET $host "id -u ${username} > /dev/null 2>&1"
    if [ $? -ne 0 ]; then
	echo ">>> "
	echo ">>> User '${username}' does not exist on host '$host'."
	echo ">>> Please fix and try again."
	echo ">>> "
	exit 1
    fi
    HOST_HOME=$(ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes -o LogLevel=QUIET $host "echo ~${username}")
    if [ "$HOST_HOME" != "$USER_HOME" ]; then
	echo ">>> "
	echo ">>> User '${username}'s home on '${host}' is $HOST_HOME."
	echo ">>> User '${username}'s home on '$HOSTNAME' is $USER_HOME."
	echo ">>> They must be the same on all hosts."
	echo ">>> Please fix and try again."
	echo ">>> "
	exit 1
    fi
    TEMPDIR=`ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes -o LogLevel=QUIET $host 'mktemp -d "/tmp/${USER}_qualify_XXXX"'`
    scp -q ${MYDIR}/check_bashrc $host:${TEMPDIR}
    ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes -o LogLevel=QUIET $host "${TEMPDIR}/check_bashrc ${username}"
    STATUS=$?
    ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes -o LogLevel=QUIET $host "rm -rf ${TEMPDIR}"
    if [ $STATUS -ne 0 ]; then
	exit 1
    fi
done 3< ${host_file}
################################################################
# CHECK SSH TO HOSTS AS ${username} ON COORDINATOR NODE
#
if [ `id -u` -eq 0 ]; then
    echo
    echo "Confirming ssh "
# First copy MYDIR to /tmp/qualify_${username} so that user has access.
    rm -rf /tmp/qualify_${username}
    mkdir -p /tmp/qualify_${username}
    (cd ${MYDIR} ; cp -r . /tmp/qualify_${username})
# Then copy host_file there.
    cp ${host_file} /tmp/qualify_${username}
# Give it to the user
    chown -R ${username} /tmp/qualify_${username}
# RUN
    su -l ${username} -c "cd /tmp/qualify_${username} ; ./checkSSHhosts ${ssh_port} host_file"
    if [ $? -ne 0 ]; then
	exit 1
    fi
fi
################################################################
# DONE
echo "...Done qualifying cluster."
exit 0
################################################################
