#!/bin/bash
#
# BEGIN_COPYRIGHT
#
# This file is part of SciDB.
# Copyright (C) 2008-2014 SciDB, Inc.
#
# SciDB is free software: you can redistribute it and/or modify
# it under the terms of the AFFERO GNU General Public License as published by
# the Free Software Foundation.
#
# SciDB is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
# INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
# NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
# the AFFERO GNU General Public License for the complete license terms.
#
# You should have received a copy of the AFFERO GNU General Public License
# along with SciDB.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
#
# END_COPYRIGHT
#
set -u
################################################################
# This script will qualify your installation.
# If you let it do what it has to do it will prepare your cluster for installation.
#
# It is based off of your configuration file.
# It is run from what will be the coordinator node.
#
################################################################
# Global values:
#
################################################################
# Processed values:
MYDIR=`dirname ${0}`
# OStype = Ubuntu CentOS Red
OStype=`awk 'NR == 1 {print $1}' /etc/issue`
case "${OStype}" in
    Ubuntu)
	;;
    CentOS)
	;;
    Red)
	;;
    *)
	echo
	echo "We do not support this operating system."
	exit 1
esac
# SELINUX
if type getenforce >/dev/null 2>&1; then
    SELINUX="`getenforce`"
else
    SELINUX=""
fi
################################################################
# Temporary files and directories
#   Note that any temp file or directory will be removed on exit
trap on_exit EXIT
function on_exit()
{
    rm -rf ${WORKING_DIR}
}
WORKING_DIR=`mktemp -d "/tmp/${USER}_INSTALL_XXXX"`
################################################################
# ARGUMENT PROCESSING
function usage {
    cat <<EOF

Usage:
$0 -h|--help
$0 <config_file>
EOF
}
if [ $# -lt 1 ]; then
    echo
    echo "Not enough arguments"
    usage
    exit 1
fi
################################################################
# yes and username are hidden arguments
# --yes means just do whatever it takes don't ask
# --user is a different username than 'scidb'
#
yes=0
username="scidb"
case "${1}" in
    -h|--help)
	usage
	exit 0
	;;
    -y|--yes)
	yes=1
	shift
	;;
    -u|--user)
	shift
	if [ $# -lt 1 ]; then
	    echo
	    echo "--user <username>"
	    echo "username not given."
	    exit 1
	fi
	username="${1}"
	shift
	;;
    -*)
	echo
	echo "Unknown switch: '${1}'"
	usage
	exit 1
	;;
esac
config_file="${1}"
if [ ! -f "${config_file}" ]; then
    echo
    echo "No configuration file at location '${config_file}'."
    exit 1
fi
################################################################
# MUST BE RUN AS ROOT
if [ `id -u` -ne 0 ]; then
    echo
    echo "This script must be run as root."
    echo "Please login or su -l as root and try again."
    exit 1
fi
################################################################
# Read in the config.ini file
. ${MYDIR}/read_config_file
################################################################
# MUST BE RUN ON THE COORDINATOR
if [ "$HOSTNAME" != "${coordinator}" ]; then
    echo
    echo "This script must be run on the coordinator '${coordinator}'."
    echo "Please login to the coordinator as root and try again."
    exit 1
fi
################################################################
# OK TO TURN OFF FIREWALLS?
echo
echo "For MPI to work (a part of SciDB) firewalls must be off."
echo "If this script encounters a firewall (iptables or ufw) it will be turned off."
echo
echo "If this is unacceptable then you can not install SciDB."
echo
read -e -p "Is this acceptable? [y|n] " yes_no
if [[ ${yes_no} =~ ^[yY] ]]; then
    :
else
    exit 1
fi
################################################################
# CHECK THAT PRESENT MACHINE HAS SSH
#
# ssh
if ! type ssh >/dev/null 2>&1; then
    echo
    echo "Can not find command 'ssh'."
    echo "You need ssh and sshd to be installed on this machine."
    echo "Try again once it is installed."
    exit 1
fi
# sshd
if ! type sshd >/dev/null 2>&1; then
    echo
    echo "Can not find daemon 'sshd'."
    echo "You need sshd to be installed on this machine."
    echo "Try again once it is installed."
    exit 1
fi
case "${OStype}" in
    Ubuntu)
	service ssh status > /dev/null 2>&1
	if [ $? -ne 0 ]; then
	    service ssh start
	fi
	;;
    CentOS|Red)
	service sshd status > /dev/null 2>&1
	if [ $? -ne 0 ]; then
	    service sshd start
	fi
	;;
esac
# sshpass
if ! type sshpass >/dev/null 2>&1; then
    echo
    echo "Installing 'sshpass'."
    echo
    case "${OStype}" in
	Ubuntu)
	    apt-get install -y sshpass
	    ;;
	CentOS|Red)
	    rpm -U http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
	    yum install -y sshpass
	    ;;
    esac
fi
export SSHPASS=""
################################################################
# CHECK SSH ON LOCAL HOST
. ${MYDIR}/check_ssh_localhost
################################################################
# CHECK SSH TO HOSTS AS ROOT
. ${MYDIR}/check_ssh_2hosts
################################################################
# DISABLE FIREWALLS
#
# Copy disable_firewall script to each host and run it.
#
echo "................................................................"
echo "Disabling firewalls on all hosts."
echo "................................................................"
while read -u3 host
do
    ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes root@$host "rm -f /tmp/disable_firewall"
    scp -q ${MYDIR}/disable_firewall root@$host:/tmp
    ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes root@$host "/tmp/disable_firewall"
done 3< ${host_file}
################################################################
# CHECK FOR ANY BLOCKAGE
#
# Use SciDB port 1239 as a test
echo "................................................................"
echo "Checking connections via SciDB ports between all nodes."
echo "................................................................"
rm -f ${WORKING_DIR}/CheckPorts.log
# Copy checkPorts script to each host and run it.
while read -u3 host
do
    ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes root@$host "rm -f /tmp/checkPorts /tmp/check_port /tmp/host_file"
    scp -q ${MYDIR}/checkPorts ${MYDIR}/check_port ${host_file} root@$host:/tmp
    ssh -n -o StrictHostKeyChecking=no -o BatchMode=yes root@$host "/tmp/checkPorts /tmp/host_file" >> ${WORKING_DIR}/CheckPorts.log 2>&1
done 3< ${host_file}
#
# Process the CheckPorts.log file
#
cp ${WORKING_DIR}/CheckPorts.log .
sed -i -e '/OK/d' -e '/Connection refused/d' ${WORKING_DIR}/CheckPorts.log
sed -i -e '/known hosts/d' ${WORKING_DIR}/CheckPorts.log
#
# Was there a problem?
#
CheckPortsWC=`wc -l ${WORKING_DIR}/CheckPorts.log|awk '{print $1}'`
if [ $CheckPortsWC -ne 0 ]; then
    cp ${WORKING_DIR}/CheckPorts.log .
    echo
    echo "There are problems with port connectivity between hosts"
    echo "that I do not know how to fix."
    echo
    echo "Firewalls have been turned off on all hosts."
    echo "SSH from here works to all hosts."
    echo
    echo "There is a log of all port problems in CheckPorts.log."
    echo
    echo ">>> Please fix and try again."
    exit 1
fi
echo "................................................................"
echo "OK: connections via SciDB ports between all nodes confirmed."
echo "................................................................"
################################################################
# CHECK SSH TO HOSTS AS SCIDB ON COORDINATOR NODE
#
# First copy MYDIR to /tmp/qualify_${username} so that user has access.
rm -rf /tmp/qualify_${username}
mkdir -p /tmp/qualify_${username}
(cd ${MYDIR} ; cp -r . /tmp/qualify_${username})
# Then copy host_file there.
cp ${host_file} /tmp/qualify_${username}
# Give it to the user
chown -R ${username} /tmp/qualify_${username}
# RUN
su -l ${username} -c "cd /tmp/qualify_${username} ; ./checkSSHhosts ${ssh_port} host_file"
################################################################
# DONE
echo "................................................................"
echo "Done qualifying all nodes to run SciDB."
echo "................................................................"
exit 0
################################################################
