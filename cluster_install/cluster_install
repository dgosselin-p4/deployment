#!/bin/bash
#
# BEGIN_COPYRIGHT
#
# This file is part of SciDB.
# Copyright (C) 2008-2014 SciDB, Inc.
#
# SciDB is free software: you can redistribute it and/or modify
# it under the terms of the AFFERO GNU General Public License as published by
# the Free Software Foundation.
#
# SciDB is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
# INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
# NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
# the AFFERO GNU General Public License for the complete license terms.
#
# You should have received a copy of the AFFERO GNU General Public License
# along with SciDB.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
#
# END_COPYRIGHT
#
set -u
################################################################
# Global variables
#
NAPTIME=3
################################################################
# Processed values:
MYDIR=`dirname ${0}`
################################################################
# Functions
function print_usage ()
{
    cat <<EOF

${0} [-s|-p <credentials>] [-u <username>] <network> <config_file>
  -s         - install Community Edition
  -p <credentials>
             - install Enterprise Edition Extensions
               <credentials> is a file with one line of the credentials (<username>:<password>) used to access the Enterprise Edition downloads.
  -s -p <credentials>
             - install Enterprise Edition
  -u <username>
             - non-root user that will run SciDB
             - defaults to user "scidb"
  <network>
             - is the network mask the cluster is on
  	       Note: in the format of W.X.Y.Z/D
  <config_file>
             - SciDB configuration file
EOF
}
################################################################
# MUST BE RUN AS ROOT
if [ `id -u` -ne 0 ]; then
    echo
    echo "This script must be run as root."
    echo "Please login or su -l as root and try again."
    exit 1
fi
################################################################
# Argument processing
#
installSciDB=0
installP4=0
credentials=""
username="scidb"
while [ $# -gt 0 ]; do
    case ${1} in
	-h|--help)
	    print_usage
	    exit 0
	    ;;
	-s|--scidb)
	    installSciDB=1
	    ;;
	-[pP]|--[pP]4)
	    if [ $# -lt 2 ]; then
		echo
		echo "ERROR: Option ${1} requires an argument."
		print_usage
		exit 1
	    fi
	    credentials="${2}"
	    installP4=1
	    shift
	    ;;
	-u|--user)
	    if [ $# -lt 2 ]; then
		echo
		echo "ERROR: Option ${1} requires an argument."
		print_usage
		exit 1
	    fi
	    username="${2}"
	    shift
	    ;;
	-*)
	    echo
	    echo "ERROR: Invalid option ${1}."
	    print_usage
	    exit 1
	    ;;
	*)
	    break
	    ;;
    esac
    shift
done
if [ $# -ne 2 ];then
    echo
    echo "ERROR: Wrong number of arguments."
    print_usage
    exit 1
fi
# CREDENTIALS
if [ ${installP4} -eq 1 ];then
    if [ ! -f "${credentials}" ];then
	echo
	echo "ERROR: Credentials '${credentials}' is not readable."
	print_usage
	exit 1
    fi
fi
# NETWORK
network="${1}"
# should be of the form d.d.d.d/d
if [ "`echo ${network} | sed 's|^[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\/[0-9]\{1,2\}$||'`" != "" ];then
    echo
    echo "ERROR: Invalid network format '${network}'."
    echo "       Should be of the form W.X.Y.Z/N."
    print_usage
    exit 1
fi
shift
# CONFIG FILE
config_file="`readlink -m ${1}`"
if [ ! -f "${config_file}" ];then
    echo
    echo "ERROR: Configuration file '${config_file}' is not readable."
    print_usage
    exit 1
fi
shift
################################################################
# Read in the config.ini file
#   read_config_file is sourced so that it sets variables in the environment
#
if [ ! -f ../qualify/read_config_file ]; then
    echo
    echo "You must have downloaded the qualify directory along with this directory."
    echo "Can not find ../qualify."
    echo "Please download everything then try again."
    exit 1
fi
WORKING_DIR=${MYDIR}
. ../qualify/read_config_file
################################################################
# CHECK ARGUMENTS
# Must have chosen either -s or -p or both
if [ ${installSciDB} -eq 0 -a ${installP4} -eq 0 ];then
    echo
    echo "ERROR: Unknown installation type."
    echo "       You need to pick one:"
    echo "         install Community Edition (-s)"
    echo "         install Enterprise Edition Extensions (-p)"
    echo "         install Enterprise Edition (-s -p)"
    print_usage
    exit 1
fi
if [ ${installSciDB} -eq 0 -a ${installP4} -eq 1 ];then
    #
    # Check if they have SciDB installed
    #
    if [ ! -d /opt/scidb/${version}/etc ]; then
	echo
	echo "You have elected to install Enterprise Edition Extensions without installing SciDB."
	echo "BUT there is no SciDB installation."
	echo
	echo -n "Would you like me to also install SciDB ? [y|n] "
	read -e yes_no
	echo
	if [[ ${yes_no} =~ ^[yY] ]]; then
	    installSciDB=1
	else
	    echo "There is no point in installing Enterprise Edition Extensions without SciDB."
	    echo "Exiting."
	    exit 1
	fi
    fi
fi
################################################################
# RUN QUALIFY
#
myconfig=$(readlink -f ${config_file})
pushd ../qualify > /dev/null 2>&1
if [ -n "${username}" ]; then
    ./qualify -u ${username} ${myconfig}
else
    ./qualify ${myconfig}
fi
if [ $? -ne 0 ]; then exit 1; fi
popd > /dev/null 2>&1
################
# HERE WE GO
if [ ${installSciDB} -eq 1 ]; then
    echo
    echo '**********************************************************'
    echo '* Configure and start Postgresql on the coordinator host *'
    echo '**********************************************************'
    echo
    SCIDB_VERSION=${version} ${MYDIR}/deploy.sh prepare_postgresql ${username} "" ${network} ${coordinator}
    echo
    echo '******************************************'
    echo '* Installing SciDB to the cluster hosts. *'
    echo '******************************************'
    echo
    sleep ${NAPTIME}
    SCIDB_VERSION=${version} ${MYDIR}/deploy.sh scidb_install_release ${version} `cat $host_file`
fi
if [ ${installP4} -eq 1 ];then
    echo
    echo '***************************************'
    echo '* Installing Enterprise Edition Extensions to the cluster hosts. *'
    echo '***************************************'
    echo
    sleep ${NAPTIME}
    if [ -f "${credentials}" ];then
	cp -f "${credentials}" "${MYDIR}/common/p4_creds.txt"
    else
	cp -f "${MYDIR}/p4_creds.txt" "${MYDIR}/common/p4_creds.txt"
    fi
    SCIDB_VERSION=${version} ${MYDIR}/deploy.sh p4_install_release ${version} `cat $host_file`
    rm -f "${MYDIR}/common/p4_creds.txt"
fi
if [ ${installSciDB} -eq 1 ]; then
    echo
    echo '********************************************************************'
    echo '* Configure SciDB to run under user ${username}                    *'
    echo '********************************************************************'
    echo
    sleep ${NAPTIME}
    if [ "${config_file}" != "config.ini" ];then
	cp -f "${config_file}" config.ini
    fi
    SCIDB_VERSION=${version} ${MYDIR}/deploy.sh scidb_prepare_wcf ${username} "" "${cluster_name}" `cat $host_file`
    if [ "${config_file}" != "config.ini" ];then
	rm -f config.ini
    fi
fi
################################################################
# HARD modify SCIDB_VER in the users .bashrc file to have new version number
sed -i 's/SCIDB_VER=[0-9.]*/SCIDB_VER=14.7/' $(eval echo ~${username})/.bashrc
################################################################
# DONE
echo "*****************************************************************************"
echo "* Done installing your cluster"
echo "*"
echo "* User ${username} must source their .bashrc file ('. ~/.bashrc')"
echo "* in order to pickup the new set of environment variables."
echo "*"
echo "* If you are logged in as this user either logout and log back in"
echo "* or source the $(eval echo ~${username})/.bashrc file."
echo "*****************************************************************************"
exit 0
################################################################
